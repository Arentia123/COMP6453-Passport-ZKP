[{"C:\\Users\\xxr98\\Desktop\\eth\\property-dapp-master\\src\\index.js":"1","C:\\Users\\xxr98\\Desktop\\eth\\property-dapp-master\\src\\App.js":"2"},{"size":254,"mtime":1702005038150,"results":"3","hashOfConfig":"4"},{"size":7206,"mtime":1702389844329,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j2pijk",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\xxr98\\Desktop\\eth\\property-dapp-master\\src\\index.js",[],"C:\\Users\\xxr98\\Desktop\\eth\\property-dapp-master\\src\\App.js",["11"],"import { experimentalStyled as styled } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport Web3 from \"web3\";\nimport { useState } from 'react';\nimport registryAbi from \"./abis/Registry.json\";\nimport propertyAbi from \"./abis/Property.json\";\nimport env from \"react-dotenv\";\n\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n  ...theme.typography.body2,\n  padding: theme.spacing(2),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}));\n\nlet ppt, registry;\n\nfunction App() {\n\n  const [account, setAccount] = useState(\"\");\n  const [balance, setBalance] = useState(\"\");\n  const [properties, setProperties] = useState(null);\n  const [purchases, setPurchases] = useState(null);\n\n  const loadWeb3 = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      // Connect to metamask\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n      }\n      catch (error) {\n        console.log(error);\n      }\n\n      const accounts = await web3.eth.getAccounts();\n      \n      if (typeof accounts[0] !== \"undefined\") {\n        const balance = await web3.eth.getBalance(accounts[0]);\n        setAccount(accounts[0]);\n        setBalance(balance);\n      } \n      else {\n        console.log(\"Please login with metamask\")\n      }\n\n      try {\n        // Access smart contracts\n        ppt = new web3.eth.Contract(propertyAbi, \"0x9f3F5dA449c4e1541fcF6f8359a18d72BCc0df2f\");\n        registry = new web3.eth.Contract(registryAbi, \"0xf15Eb7990618E201d074f552bc36394F5b410505\");\n\n        getInitialData();\n      }\n      catch (e) {\n        console.log(\"Error loading smart contract: \" + e);\n      }\n    }\n    else {\n      window.alert(\"Please install metamask\")\n    }\n  };\n\n  const getInitialData = async () => {\n    // Get list of properties & purchases\n    let props = await registry.methods.getProperties().call();\n    setPurchases(await registry.methods.getPurchases().call());\n\n    // Collect all ownership information from NFT contract\n    setProperties(await Promise.all(props.map(async (item, index) => ({\n      ...item,\n      id: index,\n      owner: await ppt.methods.ownerOf(index).call()\n    }))));\n  }\n\n  const buyProperty = async (pid, price) => {\n    await registry.methods.buyProperty(pid)\n      .send({ from: account, value: price, gas: 1e6 })\n      .then(console.log);\n  };\n\n  const setPropertyAvailability = async (pid, avl) => {\n    await registry.methods.setPropertyAvailability(pid, avl)\n      .send({ from: account, gas: 1e6 })\n      .then(console.log);\n  };\n\n  loadWeb3();\n\n  return (\n    <div className=\"App\">\n      <Box sx={{ flexGrow: 1 }}>\n\n        <AppBar position=\"static\" style={{ marginBottom: \"20px\" }}>\n          <Toolbar>\n            <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n              Property DAPP\n            </Typography>\n\n            <p>\n              account: { account.substring(0, 20) }... <br/>\n              balance: { balance / 1e18 } ETH\n            </p>\n            {/* <Button color=\"inherit\">Login</Button> */}\n          </Toolbar>\n        </AppBar>\n\n      <Container maxWidth=\"md\">\n\n        <Typography variant=\"h4\" gutterBottom component=\"div\">\n          Available Properties\n        </Typography>\n        <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}\n          style={{ marginBottom: \"20px\" }}>\n          {properties && properties.map((item, index) => item.owner !== account && (\n            <Grid item xs={2} sm={4} md={4} key={index}>\n              <Item>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                  Property #{item.id}\n                </Typography>\n                Price: {item.price} <br/>\n                Location: {item.location} <br/>\n                Size: {item.size} <br/>\n                {item.available && \n                <Button variant=\"outlined\" size=\"small\" onClick={() => buyProperty(item.id, item.price)}>\n                  Buy\n                </Button>}\n              </Item>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Typography variant=\"h4\" gutterBottom component=\"div\">\n          Owned Properties\n        </Typography>\n        <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}\n          style={{ marginBottom: \"20px\" }}>\n          {properties && properties.map((item, index) => item.owner === account && \n            (<Grid item xs={2} sm={4} md={4} key={index}>\n              <Item>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                  Property #{item.id}\n                </Typography>\n                Price: {item.price} <br/>\n                Location: {item.location} <br/>\n                Size: {item.size} <br/>\n                {item.available ? \n                <Button variant=\"outlined\" size=\"small\" onClick={() => setPropertyAvailability(item.id, false)}>\n                  Available\n                </Button>: \n                <Button variant=\"outlined\" color=\"error\" size=\"small\" onClick={() => setPropertyAvailability(item.id, true)}>\n                  Unavailable\n              </Button>}\n              </Item>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Typography variant=\"h4\" gutterBottom component=\"div\">\n          Purchases\n        </Typography>\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Property Id</TableCell>\n                <TableCell align=\"right\">Buyer</TableCell>\n                <TableCell align=\"right\">Owner</TableCell>\n                <TableCell align=\"right\">Price</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {purchases && purchases.map((item) => (\n                <TableRow\n                  key={item.pid}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell component=\"th\" scope=\"row\">\n                    {item.pid}\n                  </TableCell>\n                  <TableCell align=\"right\">{item.buyer.substring(0, 15)}...</TableCell>\n                  <TableCell align=\"right\">{item.owner.substring(0, 15)}...</TableCell>\n                  <TableCell align=\"right\">{item.price}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Container>\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"12","severity":1,"message":"13","line":20,"column":8,"nodeType":"14","messageId":"15","endLine":20,"endColumn":11},"no-unused-vars","'env' is defined but never used.","Identifier","unusedVar"]